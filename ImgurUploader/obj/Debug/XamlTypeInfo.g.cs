//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace ImgurUploader
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::ImgurUploader.imgup_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::ImgurUploader.imgup_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::ImgurUploader.imgup_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace ImgurUploader.imgup_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_FlyoutPage() { return new global::ImgurUploader.FlyoutPage(); }

        private object Activate_1_LoggedInUserStringConverter() { return new global::ImgurUploader.Common.LoggedInUserStringConverter(); }

        private object Activate_2_AccountFlyout() { return new global::ImgurUploader.AccountFlyout(); }

        private object Activate_3_AboutFlyout() { return new global::ImgurUploader.AboutFlyout(); }

        private object Activate_4_BuyControl() { return new global::ImgurUploader.BuyControl(); }

        private object Activate_5_EmptyUploadListControl() { return new global::ImgurUploader.EmptyUploadListControl(); }

        private object Activate_6_AuthenticationPage() { return new global::ImgurUploader.AuthenticationPage(); }

        private object Activate_7_PrivacyPolicy() { return new global::ImgurUploader.PrivacyPolicy(); }

        private object Activate_8_LayoutAwarePage() { return new global::ImgurUploader.Common.LayoutAwarePage(); }

        private object Activate_9_EnabledWithSelectionConverter() { return new global::ImgurUploader.Common.EnabledWithSelectionConverter(); }

        private object Activate_10_VisibleWhenNonNull() { return new global::ImgurUploader.Common.VisibleWhenNonNull(); }

        private object Activate_11_VisibleWhenAlbumCreationSucceeded() { return new global::ImgurUploader.Common.VisibleWhenAlbumCreationSucceeded(); }

        private object Activate_12_UploadResultsControl() { return new global::ImgurUploader.UploadResultsControl(); }

        private object Activate_13_FinishedUploadResult() { return new global::ImgurUploader.UploadResult.FinishedUploadResult(); }

        private object Activate_14_UploadStatusConverter() { return new global::ImgurUploader.Common.UploadStatusConverter(); }

        private object Activate_15_UtcToLocalTimeConverter() { return new global::ImgurUploader.Common.UtcToLocalTimeConverter(); }

        private object Activate_16_UploadHistoryPage() { return new global::ImgurUploader.UploadHistory.UploadHistoryPage(); }

        private object Activate_17_CopyableLinkControl() { return new global::ImgurUploader.UploadResult.CopyableLinkControl(); }

        private object Activate_18_PluralityConverter() { return new global::ImgurUploader.Common.PluralityConverter(); }

        private object Activate_19_ElapsedTimeConverter() { return new global::ImgurUploader.Common.ElapsedTimeConverter(); }

        private object Activate_20_BooleanToVisibilityConverter() { return new global::ImgurUploader.Common.BooleanToVisibilityConverter(); }

        private object Activate_21_ImageDetailsPaneWidthConverter() { return new global::ImgurUploader.ImageDetailsPaneWidthConverter(); }

        private object Activate_22_VisibleWhenMoreThanOne() { return new global::ImgurUploader.Common.VisibleWhenMoreThanOne(); }

        private object Activate_23_StringEqualityConverter() { return new global::ImgurUploader.Common.StringEqualityConverter(); }

        private object Activate_24_MainPage() { return new global::ImgurUploader.MainPage(); }

        private object Activate_25_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::ImgurUploader.QueuedFile>(); }

        private object Activate_26_Collection() { return new global::System.Collections.ObjectModel.Collection<global::ImgurUploader.QueuedFile>(); }

        private object Activate_27_QueuedFile() { return new global::ImgurUploader.QueuedFile(); }

        private object Activate_28_QueuedItem() { return new global::ImgurUploader.QueuedItem(); }

        private object Activate_31_AlbumPreferences() { return new global::ImgurUploader.AlbumPreferences(); }

        private object Activate_32_SharePage() { return new global::ImgurUploader.SharePage(); }

        private object Activate_34_UploadResultPage() { return new global::ImgurUploader.UploadResultPage(); }

        private void VectorAdd_25_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::ImgurUploader.QueuedFile>)instance;
            var newItem = (global::ImgurUploader.QueuedFile)item;
            collection.Add(newItem);
        }

        private void VectorAdd_26_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::ImgurUploader.QueuedFile>)instance;
            var newItem = (global::ImgurUploader.QueuedFile)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Object":
                xamlType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Windows.UI.Xaml.Controls.Button":
                xamlType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Button));
                break;

            case "String":
                xamlType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Boolean":
                xamlType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.Visibility":
                xamlType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Visibility));
                break;

            case "Windows.UI.Xaml.Media.Imaging.BitmapImage":
                xamlType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Imaging.BitmapImage));
                break;

            case "Int32":
                xamlType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "ImgurUploader.FlyoutPage":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.FlyoutPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_FlyoutPage;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.LoggedInUserStringConverter":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.LoggedInUserStringConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_1_LoggedInUserStringConverter;
                xamlType = userType;
                break;

            case "ImgurUploader.AccountFlyout":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.AccountFlyout), GetXamlTypeByName("ImgurUploader.FlyoutPage"));
                userType.Activator = Activate_2_AccountFlyout;
                xamlType = userType;
                break;

            case "ImgurUploader.AboutFlyout":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.AboutFlyout), GetXamlTypeByName("ImgurUploader.FlyoutPage"));
                userType.Activator = Activate_3_AboutFlyout;
                xamlType = userType;
                break;

            case "ImgurUploader.BuyControl":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.BuyControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_4_BuyControl;
                xamlType = userType;
                break;

            case "ImgurUploader.EmptyUploadListControl":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.EmptyUploadListControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_5_EmptyUploadListControl;
                userType.AddMemberName("SelectButton");
                xamlType = userType;
                break;

            case "ImgurUploader.AuthenticationPage":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.AuthenticationPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_6_AuthenticationPage;
                xamlType = userType;
                break;

            case "ImgurUploader.PrivacyPolicy":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.PrivacyPolicy), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_7_PrivacyPolicy;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.LayoutAwarePage":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_8_LayoutAwarePage;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.EnabledWithSelectionConverter":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.EnabledWithSelectionConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_EnabledWithSelectionConverter;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.VisibleWhenNonNull":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.VisibleWhenNonNull), GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_VisibleWhenNonNull;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.VisibleWhenAlbumCreationSucceeded":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.VisibleWhenAlbumCreationSucceeded), GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_VisibleWhenAlbumCreationSucceeded;
                xamlType = userType;
                break;

            case "ImgurUploader.UploadResultsControl":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.UploadResultsControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_12_UploadResultsControl;
                userType.AddMemberName("Result");
                xamlType = userType;
                break;

            case "ImgurUploader.UploadResult.FinishedUploadResult":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.UploadResult.FinishedUploadResult), GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_FinishedUploadResult;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.UploadStatusConverter":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.UploadStatusConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_UploadStatusConverter;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.UtcToLocalTimeConverter":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.UtcToLocalTimeConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_UtcToLocalTimeConverter;
                xamlType = userType;
                break;

            case "ImgurUploader.UploadHistory.UploadHistoryPage":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.UploadHistory.UploadHistoryPage), GetXamlTypeByName("ImgurUploader.Common.LayoutAwarePage"));
                userType.Activator = Activate_16_UploadHistoryPage;
                xamlType = userType;
                break;

            case "ImgurUploader.UploadResult.CopyableLinkControl":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.UploadResult.CopyableLinkControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_17_CopyableLinkControl;
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsViewableInBrowser");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ViewInBrowserButtonVisibility");
                xamlType = userType;
                break;

            case "ImgurUploader.Common.PluralityConverter":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.PluralityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_18_PluralityConverter;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.ElapsedTimeConverter":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.ElapsedTimeConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_ElapsedTimeConverter;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.BooleanToVisibilityConverter":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.BooleanToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_20_BooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case "ImgurUploader.ImageDetailsPaneWidthConverter":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.ImageDetailsPaneWidthConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_21_ImageDetailsPaneWidthConverter;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.VisibleWhenMoreThanOne":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.VisibleWhenMoreThanOne), GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_VisibleWhenMoreThanOne;
                xamlType = userType;
                break;

            case "ImgurUploader.Common.StringEqualityConverter":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.Common.StringEqualityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_23_StringEqualityConverter;
                xamlType = userType;
                break;

            case "ImgurUploader.MainPage":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.MainPage), GetXamlTypeByName("ImgurUploader.Common.LayoutAwarePage"));
                userType.Activator = Activate_24_MainPage;
                userType.AddMemberName("QueuedFiles");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::ImgurUploader.QueuedFile>),
                                                   "System.Collections.ObjectModel.ObservableCollection<ImgurUploader.QueuedFile>");
                userType.AddMemberName("AlbumPreferences");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<ImgurUploader.QueuedFile>":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::ImgurUploader.QueuedFile>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<ImgurUploader.QueuedFile>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::ImgurUploader.QueuedFile>),
                                                   "System.Collections.ObjectModel.ObservableCollection<ImgurUploader.QueuedFile>");
                userType.Activator = Activate_25_ObservableCollection;
                userType.CollectionAdd = VectorAdd_25_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<ImgurUploader.QueuedFile>":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::ImgurUploader.QueuedFile>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::ImgurUploader.QueuedFile>),
                                                   "System.Collections.ObjectModel.Collection<ImgurUploader.QueuedFile>");
                userType.Activator = Activate_26_Collection;
                userType.CollectionAdd = VectorAdd_26_Collection;
                xamlType = userType;
                break;

            case "ImgurUploader.QueuedFile":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.QueuedFile), GetXamlTypeByName("ImgurUploader.QueuedItem"));
                userType.Activator = Activate_27_QueuedFile;
                userType.AddMemberName("File");
                userType.AddMemberName("FileName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Thumbnail");
                xamlType = userType;
                break;

            case "ImgurUploader.QueuedItem":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.QueuedItem), GetXamlTypeByName("ImgurUploader.ObservableObject"));
                userType.Activator = Activate_28_QueuedItem;
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Description");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "ImgurUploader.ObservableObject":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.ObservableObject), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Windows.Storage.StorageFile":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Storage.StorageFile), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "ImgurUploader.AlbumPreferences":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.AlbumPreferences), GetXamlTypeByName("Object"));
                userType.Activator = Activate_31_AlbumPreferences;
                xamlType = userType;
                break;

            case "ImgurUploader.SharePage":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.SharePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_SharePage;
                xamlType = userType;
                break;

            case "ImgurUploader.UploadingProgressPopup":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.UploadingProgressPopup), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.AddMemberName("TotalFiles");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("CompletedFiles");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("UploadCancelButton");
                xamlType = userType;
                break;

            case "ImgurUploader.UploadResultPage":
                userType = new global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ImgurUploader.UploadResultPage), GetXamlTypeByName("ImgurUploader.Common.LayoutAwarePage"));
                userType.Activator = Activate_34_UploadResultPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_EmptyUploadListControl_SelectButton(object instance)
        {
            var that = (global::ImgurUploader.EmptyUploadListControl)instance;
            return that.SelectButton;
        }
        private object get_1_UploadResultsControl_Result(object instance)
        {
            var that = (global::ImgurUploader.UploadResultsControl)instance;
            return that.Result;
        }
        private void set_1_UploadResultsControl_Result(object instance, object Value)
        {
            var that = (global::ImgurUploader.UploadResultsControl)instance;
            that.Result = (global::ImgurUploader.UploadResult.FinishedUploadResult)Value;
        }
        private object get_2_CopyableLinkControl_Title(object instance)
        {
            var that = (global::ImgurUploader.UploadResult.CopyableLinkControl)instance;
            return that.Title;
        }
        private void set_2_CopyableLinkControl_Title(object instance, object Value)
        {
            var that = (global::ImgurUploader.UploadResult.CopyableLinkControl)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_3_CopyableLinkControl_Value(object instance)
        {
            var that = (global::ImgurUploader.UploadResult.CopyableLinkControl)instance;
            return that.Value;
        }
        private void set_3_CopyableLinkControl_Value(object instance, object Value)
        {
            var that = (global::ImgurUploader.UploadResult.CopyableLinkControl)instance;
            that.Value = (global::System.String)Value;
        }
        private object get_4_CopyableLinkControl_IsViewableInBrowser(object instance)
        {
            var that = (global::ImgurUploader.UploadResult.CopyableLinkControl)instance;
            return that.IsViewableInBrowser;
        }
        private void set_4_CopyableLinkControl_IsViewableInBrowser(object instance, object Value)
        {
            var that = (global::ImgurUploader.UploadResult.CopyableLinkControl)instance;
            that.IsViewableInBrowser = (global::System.Boolean)Value;
        }
        private object get_5_CopyableLinkControl_ViewInBrowserButtonVisibility(object instance)
        {
            var that = (global::ImgurUploader.UploadResult.CopyableLinkControl)instance;
            return that.ViewInBrowserButtonVisibility;
        }
        private object get_6_MainPage_QueuedFiles(object instance)
        {
            var that = (global::ImgurUploader.MainPage)instance;
            return that.QueuedFiles;
        }
        private object get_7_QueuedFile_File(object instance)
        {
            var that = (global::ImgurUploader.QueuedFile)instance;
            return that.File;
        }
        private void set_7_QueuedFile_File(object instance, object Value)
        {
            var that = (global::ImgurUploader.QueuedFile)instance;
            that.File = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_8_QueuedFile_FileName(object instance)
        {
            var that = (global::ImgurUploader.QueuedFile)instance;
            return that.FileName;
        }
        private object get_9_QueuedFile_Thumbnail(object instance)
        {
            var that = (global::ImgurUploader.QueuedFile)instance;
            return that.Thumbnail;
        }
        private void set_9_QueuedFile_Thumbnail(object instance, object Value)
        {
            var that = (global::ImgurUploader.QueuedFile)instance;
            that.Thumbnail = (global::Windows.UI.Xaml.Media.Imaging.BitmapImage)Value;
        }
        private object get_10_QueuedItem_Title(object instance)
        {
            var that = (global::ImgurUploader.QueuedItem)instance;
            return that.Title;
        }
        private void set_10_QueuedItem_Title(object instance, object Value)
        {
            var that = (global::ImgurUploader.QueuedItem)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_11_QueuedItem_Description(object instance)
        {
            var that = (global::ImgurUploader.QueuedItem)instance;
            return that.Description;
        }
        private void set_11_QueuedItem_Description(object instance, object Value)
        {
            var that = (global::ImgurUploader.QueuedItem)instance;
            that.Description = (global::System.String)Value;
        }
        private object get_12_MainPage_AlbumPreferences(object instance)
        {
            var that = (global::ImgurUploader.MainPage)instance;
            return that.AlbumPreferences;
        }
        private object get_13_UploadingProgressPopup_TotalFiles(object instance)
        {
            var that = (global::ImgurUploader.UploadingProgressPopup)instance;
            return that.TotalFiles;
        }
        private void set_13_UploadingProgressPopup_TotalFiles(object instance, object Value)
        {
            var that = (global::ImgurUploader.UploadingProgressPopup)instance;
            that.TotalFiles = (global::System.Int32)Value;
        }
        private object get_14_UploadingProgressPopup_CompletedFiles(object instance)
        {
            var that = (global::ImgurUploader.UploadingProgressPopup)instance;
            return that.CompletedFiles;
        }
        private void set_14_UploadingProgressPopup_CompletedFiles(object instance, object Value)
        {
            var that = (global::ImgurUploader.UploadingProgressPopup)instance;
            that.CompletedFiles = (global::System.Int32)Value;
        }
        private object get_15_UploadingProgressPopup_UploadCancelButton(object instance)
        {
            var that = (global::ImgurUploader.UploadingProgressPopup)instance;
            return that.UploadCancelButton;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::ImgurUploader.imgup_XamlTypeInfo.XamlMember xamlMember = null;
            global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "ImgurUploader.EmptyUploadListControl.SelectButton":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.EmptyUploadListControl");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "SelectButton", "Windows.UI.Xaml.Controls.Button");
                xamlMember.Getter = get_0_EmptyUploadListControl_SelectButton;
                xamlMember.SetIsReadOnly();
                break;
            case "ImgurUploader.UploadResultsControl.Result":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.UploadResultsControl");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "Result", "ImgurUploader.UploadResult.FinishedUploadResult");
                xamlMember.Getter = get_1_UploadResultsControl_Result;
                xamlMember.Setter = set_1_UploadResultsControl_Result;
                break;
            case "ImgurUploader.UploadResult.CopyableLinkControl.Title":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.UploadResult.CopyableLinkControl");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_2_CopyableLinkControl_Title;
                xamlMember.Setter = set_2_CopyableLinkControl_Title;
                break;
            case "ImgurUploader.UploadResult.CopyableLinkControl.Value":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.UploadResult.CopyableLinkControl");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "Value", "String");
                xamlMember.Getter = get_3_CopyableLinkControl_Value;
                xamlMember.Setter = set_3_CopyableLinkControl_Value;
                break;
            case "ImgurUploader.UploadResult.CopyableLinkControl.IsViewableInBrowser":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.UploadResult.CopyableLinkControl");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "IsViewableInBrowser", "Boolean");
                xamlMember.Getter = get_4_CopyableLinkControl_IsViewableInBrowser;
                xamlMember.Setter = set_4_CopyableLinkControl_IsViewableInBrowser;
                break;
            case "ImgurUploader.UploadResult.CopyableLinkControl.ViewInBrowserButtonVisibility":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.UploadResult.CopyableLinkControl");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "ViewInBrowserButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_5_CopyableLinkControl_ViewInBrowserButtonVisibility;
                xamlMember.SetIsReadOnly();
                break;
            case "ImgurUploader.MainPage.QueuedFiles":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.MainPage");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "QueuedFiles", "System.Collections.ObjectModel.ObservableCollection<ImgurUploader.QueuedFile>");
                xamlMember.Getter = get_6_MainPage_QueuedFiles;
                xamlMember.SetIsReadOnly();
                break;
            case "ImgurUploader.QueuedFile.File":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.QueuedFile");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "File", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_7_QueuedFile_File;
                xamlMember.Setter = set_7_QueuedFile_File;
                break;
            case "ImgurUploader.QueuedFile.FileName":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.QueuedFile");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "FileName", "String");
                xamlMember.Getter = get_8_QueuedFile_FileName;
                xamlMember.SetIsReadOnly();
                break;
            case "ImgurUploader.QueuedFile.Thumbnail":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.QueuedFile");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "Thumbnail", "Windows.UI.Xaml.Media.Imaging.BitmapImage");
                xamlMember.Getter = get_9_QueuedFile_Thumbnail;
                xamlMember.Setter = set_9_QueuedFile_Thumbnail;
                break;
            case "ImgurUploader.QueuedItem.Title":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.QueuedItem");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_10_QueuedItem_Title;
                xamlMember.Setter = set_10_QueuedItem_Title;
                break;
            case "ImgurUploader.QueuedItem.Description":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.QueuedItem");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.Getter = get_11_QueuedItem_Description;
                xamlMember.Setter = set_11_QueuedItem_Description;
                break;
            case "ImgurUploader.MainPage.AlbumPreferences":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.MainPage");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "AlbumPreferences", "ImgurUploader.AlbumPreferences");
                xamlMember.Getter = get_12_MainPage_AlbumPreferences;
                xamlMember.SetIsReadOnly();
                break;
            case "ImgurUploader.UploadingProgressPopup.TotalFiles":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.UploadingProgressPopup");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "TotalFiles", "Int32");
                xamlMember.Getter = get_13_UploadingProgressPopup_TotalFiles;
                xamlMember.Setter = set_13_UploadingProgressPopup_TotalFiles;
                break;
            case "ImgurUploader.UploadingProgressPopup.CompletedFiles":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.UploadingProgressPopup");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "CompletedFiles", "Int32");
                xamlMember.Getter = get_14_UploadingProgressPopup_CompletedFiles;
                xamlMember.Setter = set_14_UploadingProgressPopup_CompletedFiles;
                break;
            case "ImgurUploader.UploadingProgressPopup.UploadCancelButton":
                userType = (global::ImgurUploader.imgup_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImgurUploader.UploadingProgressPopup");
                xamlMember = new global::ImgurUploader.imgup_XamlTypeInfo.XamlMember(this, "UploadCancelButton", "Windows.UI.Xaml.Controls.Button");
                xamlMember.Getter = get_15_UploadingProgressPopup_UploadCancelButton;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::ImgurUploader.imgup_XamlTypeInfo.XamlSystemBaseType
    {
        global::ImgurUploader.imgup_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::ImgurUploader.imgup_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::ImgurUploader.imgup_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::ImgurUploader.imgup_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


